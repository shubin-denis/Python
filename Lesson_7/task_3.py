# Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо
# создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий
# количеству ячеек клетки (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение ( __add__() ), вычитание ( __sub__() ),
# умножение ( __mul__() ), деление ( __truediv__() ). Данные методы должны применяться только
# к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением
# до целого) деление клеток, соответственно.
# Сложение . Объединение двух клеток. При этом число ячеек общей клетки должно равняться
# сумме ячеек исходных двух клеток.
# Вычитание . Участвуют две клетки. Операцию необходимо выполнять только если разность
# количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение . Создается общая клетка из двух. Число ячеек общей клетки определяется как
# произведение количества ячеек этих двух клеток.
# Деление . Создается общая клетка из двух. Число ячеек общей клетки определяется как
# целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order() , принимающий экземпляр класса и
# количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n***** ..., где количество ячеек между \n
# равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний
# ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод
# make_order() вернет строку: *****\n*****\n** .
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод
# make_order() вернет строку: *****\n*****\n***** .

class CellInLine:
    def __init__(self, rows):
        self.rows = rows

    def __floordiv__(self, other):
        return other // self.rows

    def __mod__(self, other):
        return other % self.rows


class Cell:
    def __init__(self, param):
        self.param = param

    def make_order(self, rows):
        num_of_line = (CellInLine(rows) // self.param)
        remains = (CellInLine(rows) % self.param)
        cells_str = ''
        for i in range(num_of_line):
            cells_str += '*' * rows + '\n'
        cells_str += '*' * remains
        return cells_str

    def __add__(self, other):
        return self.param + other

    def __sub__(self, other):
        try:
            result = self.param - other
            if result > 0:
                return result
            else:
                raise Warning
        except Warning:
            return 'The number of cells in a cell is negative'

    def __mul__(self, other):
        return self.param * other

    def __truediv__(self, other):
        return self.param // other


cell = Cell(24)
print(cell + 9)
print(cell - 9)
print(cell * 9)
print(cell / 9)

print(cell.make_order(7))
